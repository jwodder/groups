- Document everything!
- Handle all of the sections marked "TODO" in the code
- Implement all of the features in plan.txt
 - Implement configurable element showing
- Add a way to set an individual group's __str__, __unicode__, & LaTeX values
 - Subgroups returned by `generate` should have their names be "⟨elements of
   generating set⟩"
- Should .oper (and other group methods?) raise a TypeError/ValueError when
  given values outside the group?
- permutation.py: Make fewer things properties?
- Rename `group` to `basic_group`?
- Make Direct's (and Semidirect's?) `showElem` family "flatten" elements
  -- e.g., writing "(a,b,c)" instead of "((a,b),c)"
- Make Direct's `__str__` etc. "flatten" their output -- e.g., writing "Z_2 *
  Z_3 * Z_4" instead of "(Z_2 * Z_3) * Z_4"
- Add a LaTeX version of the `cayley` method
- Add support to groups/read.py for:
 - semidirect products
 - "Z/nZ" notation for Cyclic
 - "Aut(Z_n)" (and "Aut(Z/nZ)") notation for AutCyclic
 - HolCyclic
 - CycSemiCyc
 - GDih
 - subgroups
 - quotient groups
 - elementary abelian groups
- Make `groups/about.py` calculate/output the following:
 - automorphisms that elements induce by conjugation
 - commutators?
 - abelianity of subgroups?
 - normal subgroups within subgroups?
 - the Cayley table?
- Get rid of Group and Element?
- Rewrite `printAbout` to use the json (or simplejson?) module as much as
  possible

- Yet another possible way to do the data structures: Each specific group is a
  class that subclasses an abstract, family-specific class and defines a couple
  of class member variables; metaclass magic (à la Enum) does the rest; e.g.:

    class Cyclic5(Cyclic):
        n = 5
        # End of class

  The elements of `Cyclic5` are then its instances.  Ideally, there would also
  be factory functions for dynamically constructing subclasses of each family
  (and it'd be even better if all classes and instances were "singletons").
